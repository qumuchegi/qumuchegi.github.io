{"title":"shopee 前端笔试（编程部分）","articleTopic":"校招前端笔试题汇总","content":"以下是 shopee 2020 校招春招前端笔试的三道笔试题，前面原本还有12到选择题，难度不是很难，有根据入栈回答可能的出栈顺序的。\n\n\n### 1. 实现一个 `find3Numbers()` 的函数，接受一个字符窜，检查其是否包含3个连续数字，如果包含就返回最先出现的 3 个数字的字符窜，否则返回 false\n\n\n题目截图和我的答案：\n\n\n![image](/imgs_from_article/1581752475555__article-img__3n.png)\n\n\n### 2. 实现两个大数（整数）相加，支持无限大的数：\n\n\n题目截图：\n\n\n![image](/imgs_from_article/1581752549443__article-img__截屏2020-02-15下午2.28.23.png)\n\n\n我的答案（牛客上80%通过率）：\n\n\n```js\n// 以下算法牛客上只有 80% 通过率\nfunction add( a ,  b ) {\n  let res=''\n  // write code here\n  a=a.split('').reverse()\n  b=b.split('').reverse()\n  //console.log(a, b)\n  let isNumber = (char)=>char<=9&&char>=0\n  if(a.some(char=>!isNumber(char)) || b.some(char=>!isNumber(char))){\n     res='NaN'\n  }\n  else{\n    let short = []\n    let long = []\n    if(a.length<b.length){\n      short = a\n      long = b\n    }else{\n      short = b\n      long = a\n    }\n\n\n    let add_next = 0\n    for(let i=0; i<long.length; i++){\n      let bit\n     \n      if(i<short.length){\n        bit = parseInt(long[i])+parseInt(short[i])+add_next\n      }else{\n        bit = parseInt(long[i])+add_next\n      }\n\n\n      if(bit>=10){\n        add_next=1\n        res+=bit-10\n      }else{\n        add_next=0\n        res+=bit\n      }\n      \n    }\n    if(add_next) res+=add_next\n  }\n  return res.split('').reverse().join('')\n}\nconsole.log(add(\"null\",\"100000000\"))\nconsole.log(add(\"100000000\",\"\"))\nconsole.log(add(\"\",\"100000000\"))\nconsole.log(add(\"223\",\"987\"))\n\n\n```\n\n\n### 3. 最长回文字符窜：\n\n\n题目截图：\n\n\n![image](/imgs_from_article/1581752674911__article-img__截屏2020-02-15下午2.28.31.png)\n\n\n我的答案：\n\n\n```js\n\n\n/**\n * 动态规划求\n * 最长回文字符窜\n * 通过 leetcode 测试\n */\n\n\nlet str = 'abab'// => [a, ' ', b, ' ', a, ' ', b]\n\n\nfunction longestHuiwen(s){\n  let str = s\n  /**\n   * 使用 set 集合可以快速判断超长的同一个字符构成的字符串\n   */\n  if(str.length<=1 || [...new Set(s.split(''))].length===1) return str\n  let result = []\n  let length_max = 1\n  let chars = str.split('').join(' ').split('')\n  //console.log(chars)\n  for(let i=1; i<chars.length-1; i++){\n      let half_length = 1\n      let mid = chars[i]\n      let huiwen \n      if(mid==' ') huiwen = []\n      else huiwen = [mid]\n      /**\n       * while 循环会生成一个回文字符串\n       */\n      while(half_length <= i){\n        if(chars[i-half_length]==' ') { \n            half_length++; \n            continue\n        }\n        if( chars[i-half_length]==chars[i+half_length] ){\n            huiwen=[chars[i-half_length], ...huiwen, chars[i+half_length]]\n            half_length++\n            continue\n        }else {\n            break\n        }\n      }\n      /**\n       * 此次 for 循环中的 while 循环生成的字符串的长度与前一步\n       * 得到 for 循环的最长字符串比较长度\n       * 如果此次更长就更新最长回文\n       */\n      if(huiwen.length >= length_max){\n          length_max = huiwen.length\n          result= huiwen.join('')\n      } \n  }\n  if(result.length===0) result=chars[0]\n  return result\n}\n\n\nconsole.log(`${str}里面最长字符串是:`, longestHuiwen(str))\n```\n\n\n```"}