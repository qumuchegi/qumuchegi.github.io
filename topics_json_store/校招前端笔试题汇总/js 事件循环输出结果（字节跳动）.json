{"title":"js 事件循环输出结果（字节跳动）","articleTopic":"校招前端笔试题汇总","content":"字节成都的前端校招一面题。\n\n\n#### 第一道，关于 js 的事件循环，事件队列中宏任务和微任务的执行顺序\n\n\n```js\n// 请说出以下代码打印的结果\nasync function async1() {\n   console.log('async1 start');\n   await async2();\n   console.log('async1 end');\n}\nasync function async2() {\n   console.log('async2');\n}\nconsole.log('script start');\nsetTimeout(function() {\n     console.log('setTimeout');\n   }, 0);\nasync1();\nnew Promise(function(resolve) {\n        console.log('promise1');\n        resolve();\n}).then(function() {\n   console.log('promise2');\n});\nconsole.log('script end');\n\n\n/*\n输出：\nscript start\nasync1 start\nasync2\npromise1\nscript end\nasync1 end\npromise2\nsetTimeout\n*/\n\n\n```\n解释：\n\n\n>前面两个方法定义，然后script start,setTimeout,0秒后推到宏任务异步队列，调用async 1打印asyn1 start,await async2,包装promise,进await async2()后面的代码放到.then回调中执行,推到微任务异步队列，async2执行，打印async2,此时async1 end这句在promise.then中，处于异步队列，执行new Promise中的同步线程代码,打印promise1,执行resolve(),将.then推到微任务异步队列,继续执行script end同步线程代码,同步线程空闲,微任务异步队列依次是async1 end和promise2,宏任务异步队列是setTimeout,依次执行就是结果了\n\n\n### 第二道，简单的对数组中的元素递归求和：\n\n\n这个简单不用多说了。\n\n\n其他的还问了计算机的构成，TCP/IP 的问题，差不多忘了\n\n\n\n\n\n"}