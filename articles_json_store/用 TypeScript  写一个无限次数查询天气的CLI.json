{
  "title": "用 TypeScript  写一个无限次数查询天气的CLI",
  "content": "![image](/imgs_from_article/1589350336826__article-img__907a0e8d823a1c8878eeadfda0ac3d08.jpg)\n\n>这是个人 TypeScript 学习入门项目之一，可交互的、可以不断响应用户查询的cli工具，可以在 [npm](https://www.npmjs.com/package/my-ts-weather) 下载使用，`npm i -g my-ts-weather`.\n\n### 功能\n- 使用高德地图 API 查询天气\n- 可以编译为 Shell 命令，使用 `my-ts-weather` 命令即可开启\n- 开启后可以不断响应用户的输入\n\n### 原理\n下面来对以上的功能的原理一一解释。\n\n##### 获得高德地图 API ？\n这个只需申请高德地图 API 的使用权限即可，注册并登陆 [高德开发平台](https://console.amap.com/dev/id/choose)，之后创建运用，获得 key，使用这个 key 在加上用户输入的城市等查询字符串就可以发起查询请求。\n\n##### 怎么将 typescript 编写的脚本编译为shell，使其可以在计算机终端输入自定义命令即可开启脚本 ？\n写好脚本后，我们可以使用 `ts-node`执行 typescript 脚本，ts-node 允许我们不经过 typescript 手动编译为 javascript 再用 node 执行的中间操作，可以让我们直接运行 typescript 代码（但是实际上 ts-node 本身会有编译步骤）。用 ts-node 先开启脚本，才能进入查询，无疑这个是很不极客的做法，所以可以把脚本编译为 shell 命令，只要把这个脚本下载到任何一台计算机上，在计算机终端或者 shell 上只要输入一个特定的命令（比如`mt-ts-weather`）就可以开启脚本运行。\n\n接下来讲一下怎么实现：首先我们写好了脚本的逻辑，然后使用 ts-node 才能执行这个脚本，现在要想用一个特定命令开启脚本，而不是使用 ts-node 执行脚本，需要让计算机认识这个特定命令，否则当我们在计算机 shell 输入这个命令的时候。计算机就会输出不认识这个命令。解决方法就是在脚本最开头加上 `#!/usr/bin/env node` 这一句，意思是使用已经注册在计算机上的 node 来执行下面的代码，这要求计算机已经安装 node。还有一个步骤，我们写的是一个 typescript 脚本，所以需要把 typescript 编译为 javascript ，这样才能让 node 执行。\n\n##### 怎么做到监听用户输入实现无限次查询 ？\n\n使用 `inquirer.js` 可以实现交互式命令行，来接收用户输入，然后执行查询操作。脚本是一次执行完的，我们需要让脚本一直处于响应状态，可以使用递归实现，就是在脚本前一次查询完后，调用脚本自身，重新来一次监听用户输入和查询的过程。\n\ntypescript 代码如下：\n```ts\n#!/usr/bin/env node\n\nimport inquirer = require(\"inquirer\");\nimport colors = require(\"colors\");\nimport axios,{AxiosResponse} from \"axios\";\nimport Table = require(\"cli-table3\");\nimport weatherIcon = require(\"./weather-icon-map\");\nconst getIcon = weatherIcon.getIcon;\n\nconsole.log('my-ts-weather version 1.0.8')\npromptLoop()\nfunction promptLoop(){\n  inquirer\n  .prompt({\n    type: \"input\",\n    name: \"city\",\n    message: \"请输入要查询的城市\"\n  })\n  .then((answer: {city: string}) => {\n    queryWeather(answer.city, promptLoop)\n  })\n  .catch((err: Error) => {\n    console.log(err)\n  })\n}\n\ninterface WeatherRes {\n  status: string,\n  count: string,\n  info: string,\n  infocode: string,\n  forecasts: Forecast[]\n}\n\ninterface Forecast {\n  city: string,\n  adcode: string,\n  province: string,\n  reporttime: string,\n  casts: Cast[]\n}\n\ninterface Cast {\n  date: string,\n  week:string,\n  dayweather: string,\n  nightweather: string,\n  daytemp: string,\n  nighttemp: string,\n  daywind: string,\n  nightwind: string,\n  daypower: string,\n  nightpower: string\n}\n\nfunction queryWeather(city: string, callback:()=>void): void {\n  if(city === 'undefined'){\n    console.warn('输入城市查不到，请重新输入')\n  }else{\n    console.log('正在查询'+city+'的天气 ... ...');\n    const query:string = `?key=56e472bf225a58cafaae1a00ac4f52b4&city=${encodeURIComponent(city)}&extensions=all&output=JSON`;\n    // 高德地图 天气API\n    axios.get('https://restapi.amap.com/v3/weather/weatherInfo'+query)\n    .then((res: AxiosResponse<any>) => {\n      if(res.status===200 && res.data.count === '1') {\n        const data = res.data;\n        const {city:_city, reporttime, casts} = data.forecasts[0];\n        const table = new Table({\n          head: ['日期', '周', '白天天气', '夜晚天气', '白天温度', '晚上温度', '白天风向(风力)', '晚上风向（风力']\n        });\n        (casts as Cast[]).forEach(({\n          date,\n          week,\n          dayweather,\n          nightweather,\n          daytemp,\n          nighttemp,\n          daywind,\n          nightwind,\n          daypower,\n          nightpower\n        }) => {\n          table.push(\n            [\n              colors.magenta(date),\n              week,\n              dayweather + ` ${getIcon(dayweather)}`,\n              nightweather+ ` ${getIcon(nightweather)}`,\n              daytemp,\n              nighttemp,\n              `${daywind} (${daypower})`,\n              `${nightwind} (${nightpower})`\n            ]\n          )\n        });\n        console.log(`查询到 ${colors.green(_city)} 的天气如下表，查询时间是 ${colors.bgWhite.green(reporttime)}: `)\n        console.log(table.toString())\n      }else if(res.status===200 && res.data.count === '0'){\n        console.log(colors.red('没有该城市的天气信息，请检查输入城市的名字'))\n      }\n\n      inquirer\n      .prompt({\n        type: 'list',\n        name: 'isContinue',\n        message: '继续查询吗？',\n        default: '继续',\n        choices: [\"继续\", '算了'],\n      }).then((answer: {isContinue: string})=>{\n        if(answer.isContinue==='继续'){\n          promptLoop()\n        }else {\n          console.log(colors.bgCyan.red('谢谢使用，再见~'))\n        }\n      })\n    }).catch((err: Error)=>{\n      console.log(err)\n    })\n  }\n}\n\n```\n\n\n",
  "lastModified": "2020/5/13 下午2:56:06",
  "tags": [
    "原创",
    "TypeScript",
    "CLI",
    "shell"
  ]
}